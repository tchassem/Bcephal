package com.moriset.bcephal.grid.domain;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.moriset.bcephal.domain.ListChangeHandler;
import com.moriset.bcephal.domain.MainObject;
import com.moriset.bcephal.domain.dimension.DimensionType;
import com.moriset.bcephal.domain.filters.UniverseFilter;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.PostLoad;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import lombok.Data;
import lombok.EqualsAndHashCode;

@Entity(name = "MaterializedGrid")
@Table(name = "BCP_MATERIALIZED_GRID")
@Data
@EqualsAndHashCode(callSuper = false)
public class MaterializedGrid extends MainObject {

	private static final long serialVersionUID = 8336844573315165940L;

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "mat_grid_seq")
	@SequenceGenerator(name = "mat_grid_seq", sequenceName = "mat_grid_seq", initialValue = 1, allocationSize = 1)
	private Long id;

	@Enumerated(EnumType.STRING)
	private GrilleCategory category;
	
	private boolean editable;
	
	private boolean published;

	private boolean showAllRowsByDefault;

	private boolean allowLineCounting;
	
	@ManyToOne @jakarta.persistence.JoinColumn(name = "userFilter")
	private UniverseFilter userFilter;	
	
	@ManyToOne @jakarta.persistence.JoinColumn(name = "adminFilter")
	private UniverseFilter adminFilter;
	
	@Transient @JsonIgnore
	private UniverseFilter gridUserFilter;
	@Transient @JsonIgnore
	private UniverseFilter gridAdminFilter;
	
	private Integer visibleColumnCount;

	@JsonIgnore
	@OneToMany(cascade = jakarta.persistence.CascadeType.REFRESH, fetch = FetchType.LAZY, mappedBy = "grid")
	private List<MaterializedGridColumn> columns;

	@Transient
	private ListChangeHandler<MaterializedGridColumn> columnListChangeHandler;

	/**
	 * Default constructor
	 */
	public MaterializedGrid() {
		this.columnListChangeHandler = new ListChangeHandler<MaterializedGridColumn>();
		editable = false;
		this.category = GrilleCategory.USER;
		this.allowLineCounting = false;
		this.showAllRowsByDefault = false;
		this.visibleColumnCount = 5;
	}
	
	public MaterializedGrid(Long id) {
		this();
		this.id = id;
	}
	
	public int getVisibleColumnCount(){
		if(visibleColumnCount == null) {
			visibleColumnCount = 5;
		}
		return visibleColumnCount;
	}
	
	public MaterializedGridColumn getColumnByDimension(DimensionType dimensionType, Long dimensionId) {
		for(MaterializedGridColumn column : getColumnListChangeHandler().getItems()) {
			if(column.getType() == dimensionType && column.getDimensionId() != null && column.getDimensionId().equals(dimensionId)) {
				return column;
			}
		}
		return null;
	}
	
	public MaterializedGridColumn getColumnByDimensionAndName(DimensionType dimensionType, String name) {
		for(MaterializedGridColumn column : getColumnListChangeHandler().getItems()) {
			if(column.getType() == dimensionType && column.getName() != null && column.getName().equals(name)) {
				return column;
			}
		}
		return null;
	}
	
	public MaterializedGridColumn getColumnByCategory(GrilleColumnCategory category) {
		for(MaterializedGridColumn column : getColumnListChangeHandler().getItems()) {
			if(column.getCategory() == category) {
				return column;
			}
		}
		return null;
	}
	
	public MaterializedGridColumn getColumnByRole(GrilleColumnCategory role) {
		for(MaterializedGridColumn column : getColumnListChangeHandler().getItems()) {
			if(column.getRole() == role) {
				return column;
			}
		}
		return null;
	}
	

	@PostLoad
	public void initListChangeHandler() {
		columns.forEach( item -> { });			
		this.columnListChangeHandler.setOriginalList(columns);
	}
	
	
	@JsonIgnore
	public String getMaterializationTableName() {
		return "MATERIALIZED_GRID_" + getId();
	}
	
	@JsonIgnore
	public String getCreationSql() {
		String sql = "CREATE TABLE IF NOT EXISTS " + getMaterializationTableName() + " (ID BIGINT GENERATED BY DEFAULT AS IDENTITY";
		String coma = ", ";
		for(MaterializedGridColumn column : getColumnListChangeHandler().getItems()) {
			sql += coma + column.getDbColumnName() + " " + column.getDbColumnType(); 
			coma = ", ";
		}
		sql += ")";
		return sql;
	}

	@Override
	public MaterializedGrid copy() {
		MaterializedGrid copy = new MaterializedGrid();
		copy.setName(this.getName() + System.currentTimeMillis());
		copy.setGroup(this.getGroup());
		copy.setVisibleInShortcut(isVisibleInShortcut());
		copy.setShowAllRowsByDefault(isShowAllRowsByDefault());
		copy.setCategory(getCategory());
		copy.setEditable(isEditable());	
		copy.setAllowLineCounting(isAllowLineCounting());
		copy.setPublished(false);
		for(MaterializedGridColumn column : getColumnListChangeHandler().getItems()) {
			copy.getColumnListChangeHandler().addNew(column.copy());
		}
		return copy;
	}

}
