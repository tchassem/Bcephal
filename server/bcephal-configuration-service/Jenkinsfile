pipeline {
    agent any
	
	tools {
	   jdk 'JAVA_HOME'
	    gradle 'GRADLE_HOME'
		dockerTool 'CustomeDocker'
		 
	} 
	   
	environment {
	    DOCKER    = "${dockerTool1}/bin"
	    JAVA_HOME = "${jdk}"
		REPO = ""
		
		
	}
    
    stages {
        stage('Clone'){
             steps {
			   dir('bcephal-configuration-repository'){
					
					checkout([$class: 'GitSCM', branches: [[name: '*/master']],
					doGenerateSubmoduleConfigurations: false,
					extensions: [
					[$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true, timeout: 120]],
					submoduleCfg: [],userRemoteConfigs: [[credentialsId: 'e212babc-0713-415a-9848-da7292bb3718', url:
					 'http://saas1402fu.saas-secure.com/git/bcephal-configuration-repository.git']]])
				 }
				 sh """ 
				   echo " ${env.WORKSPACE}"
				 """
				//checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                //doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true, timeout: 120]], 
				//submoduleCfg: [],userRemoteConfigs: [[credentialsId: '5a607575-dcba-4ef3-8521-3b407f792647', url:
                // 'http://saas1402fu.saas-secure.com/git/bcephal-configuration-service.git']]])
				 
				 
			 }
        }
        stage('Build') {
            steps {	
                sh 'chmod +x gradlew'                
                gradlew('clean', 'assemble')
				sh 'ls build/libs/'	
            	
            }
        }
		 stage('Unit Tests') {
					steps {
					  script{
						 try {
							 dir('bcephal-configuration-service'){
								
							  sh 'chmod +x gradle' 
							  sh './gradlew test '
							 
						  }
						}catch(exc) {
						 def summary = junit  skipPublishingChecks: true, testResults: '**/TEST-*.xml' 
							   sh "echo ${summary.totalCount}"
							   sh " echo ${summary.failCount}"
							   sh "echo ${summary.skipCount} " 
							   sh "echo ${summary.passCount} " 
							   def percentage = summary.passCount*100/summary.totalCount
							   sh "echo ${percentage}"
					     if ( ${percentage} < 98){
						    currentBuild.result = 'FAILURE'
					     }
						 currentBuild.result = 'SUCCESS'
						}
					 }
					}
				} 
        //stage('SonarQube analysis') {
           // steps {	
            	//withSonarQubeEnv('SonarQube') {
                //    gradlew('sonarqube')
                //}
           // }
        //}       
        
                 
        //stage('Integration Tests') {
			//steps {
			//	gradlew('integrationTest -i')
			//}
			//post {
			//	always {
				//	junit '**/build/test-results/integrationTest/TEST-*.xml'
				//}
			//}
		//}
		//stage('Docker build image') {
          //steps {
		 
            //  dockerCmd "build -t becphal-configuration-service-docker-image:${env.BUILD_NUMBER} ."  
         // }
        // }
		
	   // stage('Docker tag image latest') {
			 // steps {
			// dockerCmd "tag becphal-configuration-service-docker-image:${env.BUILD_NUMBER}  becphal-configuration-service-docker-image:latest "
				   
			 //  }
		//}
		//stage('Docker image ') {
			//  steps {
			 //  dockerCmd "tag becphal-configuration-service-docker-image localhost:5000/becphal-configuration-service-docker-image "
				   
		  // }
        //}
	   // stage('Docker push image latest') {
          // steps {
          //   dockerCmd "push localhost:5000/becphal-configuration-kubernetes-service-docker-image"
               
         // }
         // }
	  //  stage('Deploy app'){
			//steps{
					//script{
						// kubernetesDeploy(configs:"deployment-configuration-service.yml", kubeconfigId:"kubeconfiguration")
									
					//}
			//}
		//}
		
    }
    post {
				always {
				 dir('/var/lib/jenkins/workspace/bcephal-configuration-service/bcephal-configuration-service/build/test-results/test/'){
					 junit  skipPublishingChecks: true, testResults: '**/TEST-*.xml'
					  sh 'ls'
				 }		 
			   }
			 failure {
				mail to: 'jwambo@moriset.com', subject: 'B-Cephal Configuration microservice build failed', body: 'B-Cephal Configuration microservice build failed.\nPlease fix!'
			}
		}
}

def gradlew(String... args) {
    sh "./gradlew ${args.join(' ')} -s"
}

def dockerCmd(args) {
    sh "echo ${tool 'CustomeDocker'}"
    sh "echo ${env.DOCKER_HOST}"
    sh "${tool 'CustomeDocker'}/bin/docker ${args}"
}