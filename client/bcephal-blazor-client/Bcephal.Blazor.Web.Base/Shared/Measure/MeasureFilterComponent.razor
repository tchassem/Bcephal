
@if (!InfosKey.Equals("InfosKey"))
{
    <div class="card w-100 h-100">
        <div class="card-header @HeaderStyle">
            <div class="d-flex flex-row">
                <i class="mr-1 ml-1 mt-auto mb-auto fa fa-balance-scale" style="cursor:pointer;"></i>
                <span class="mr-auto ml-1"> @AppState["MEASURE"] </span>
            </div>
            <span class="ml-auto mr-1">
                <i class="m-2 fa fa-expand" style="cursor:pointer;" @onclick="@(() => ShowOtherFieldFilters())"></i>
            </span>
        </div>
        <div class="card-body w-100 p-0" style="height: calc(100% - var(--bc-header-height)); overflow: auto;">
            @{
                int offset = 0;
                int tail = Items.Count;
                @while (offset < tail)
                {
                    @RenderTemplate(Items[offset], true);
                    offset++;
                }
                @RenderTemplate(new MeasureFilterItem(), false);
            }
        </div>
    </div>
}
@code
{


    RenderFragment RenderTemplate(MeasureFilterItem item_, bool addButton) => __builder =>
    { //@key=InfosKey
        <div class="mt-1 w-100">
            <MeasureFilterItemComponent Editable=Editable modelmeasure="item_" 
                                        ExpandField="@IsExpand"
                                        OnClickRemove="RemoveMFilterItem"
                                        ItemCallback="TargetFilter"
                                        removeButton="addButton"
                                        Measures_="MeasureItems_"
                                        ShouldRender_="ShouldRender_">
            </MeasureFilterItemComponent>
        </div>
        };
    
}
